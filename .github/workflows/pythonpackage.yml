name: build

on: [push]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    # runs-on: macos-latest
    strategy:
      matrix:
        #python-version: [3.5, 3.6, 3.7, 3.8]
        #os: [ubuntu-latest, macos-latest, windows-latest]
        os: [macos-latest]
        #os: [ubuntu-latest]
        #os: [windows-latest]
        python-version: [3.9]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
      if: github.ref == 'refs/heads/master'
    - name: Install dependencies (Linux)
      run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install coveralls
          python -m pyspedas.mms.tests.setup_tests
      if: matrix.os == 'ubuntu-latest' && github.ref == 'refs/heads/master'
    - name: Install dependencies (Windows)
      run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install coveralls
          python -m pyspedas.mms.tests.setup_tests
      if: matrix.os == 'windows-latest' && github.ref == 'refs/heads/master'
    - name: Install dependencies (macOS)
      run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install coveralls
          python -m pyspedas.mms.tests.setup_tests
      if: matrix.os == 'macos-latest' && github.ref == 'refs/heads/master'
    - name: Lint with flake8
      if: github.ref == 'refs/heads/master'
      run: |
        pip install flake8
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude 'erg'
        # exit-zero treats all errors as warnings. 
        flake8 . --count --exit-zero --max-complexity=10 --statistics # --max-line-length=127 --exclude 'erg'
    - name: Test with unittest
      if: github.ref == 'refs/heads/master'
      env:
        COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}
      run: |
        coverage run -a -m pyspedas.hapi.tests.tests
        coverage run -a -m pyspedas.mms.tests.mms_part_getspec
        coverage run -a -m pyspedas.mms.tests.load_routine_tests
        coverage run -a -m pyspedas.mms.tests.feeps
        # coverage run -a -m pyspedas.mms.tests.eis
        coverage run -a -m pyspedas.mms.tests.fpi_tests
        coverage run -a -m pyspedas.mms.tests.file_filter
        coverage run -a -m pyspedas.mms.tests.data_rate_segments
        coverage run -a -m pyspedas.mms.tests.curlometer
        coverage run -a -m pyspedas.mms.tests.wavpol
        coverage run -a -m pyspedas.dscovr.tests.tests
        coverage run -a -m pyspedas.utilities.tests.download_tests
        coverage run -a -m pyspedas.utilities.tests.misc_tests
        coverage run -a -m pyspedas.utilities.tests.time_tests
        coverage run -a -m pyspedas.cotrans.tests.cotrans
        coverage run -a -m pyspedas.cluster.tests.tests
        coverage run -a -m pyspedas.csswe.tests.tests
        coverage run -a -m pyspedas.ace.tests.tests
        coverage run -a -m pyspedas.equator_s.tests.tests
        coverage run -a -m pyspedas.image.tests.tests
        # coverage run -a -m pyspedas.psp.tests.tests
        coverage run -a -m pyspedas.rbsp.tests.tests
        coverage run -a -m pyspedas.stereo.tests.tests
        coverage run -a -m pyspedas.twins.tests.tests
        coverage run -a -m pyspedas.wind.tests.tests
        coverage run -a -m pyspedas.poes.tests.tests
        coverage run -a -m pyspedas.polar.tests.tests
        coverage run -a -m pyspedas.geotail.tests.tests
        coverage run -a -m pyspedas.analysis.tests.tests
        coverage run -a -m pyspedas.fast.tests.tests
        coverage run -a -m pyspedas.omni.tests.tests
        coverage run -a -m pyspedas.themis.tests.tests
        coverage run -a -m pyspedas.maven.tests.tests
        coverage run -a -m pyspedas.goes.tests.tests
        coverage run -a -m pyspedas.mica.tests.tests
        coverage run -a -m pyspedas.ulysses.tests.tests
        coverage run -a -m pyspedas.erg.tests.tests
        coverage run -a -m pyspedas.solo.tests.tests
        coverage run -a -m pyspedas.kyoto.tests.tests
        coverage run -a -m pyspedas.swarm.tests.tests
        coverage run -a -m pyspedas.themis.tests.tests_themis_check_args
        coverage run -a -m pyspedas.themis.tests.tests_cal_fit
        coveralls
